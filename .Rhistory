setwd("~/GitHub/DataIncubator")
library(ggplot2)
solar <- read.csv("~/GitHub/DataIncubator/openpv_all.csv")
View(solar)
is.numeric.Date(solar$date_installed)
solar$install <- as.numeric(solar$date_installed)
solar$install <- as.numeric.Date(solar$date_installed)
solar$install <- as.Date(solar$date_installed)
solar$install <- as.Date(solar$date_installed, %m/%d/%y)
solar$install <- as.Date(solar$date_installed, "%m/%d/%y")
solar$install <- as.Date(solar$date_installed, "%mm/%dd/%yyyyy")
is.character(solar$date_installed)
is.factor(solar$date_installed)
solar$install <- as.Date(solar$date_installed, format = "%m/%d/%y")
solar$install <- as.Date(as.character(solar$date_installed, format = "%m/%d/%y"))
solar <- read.csv("~/GitHub/DataIncubator/openpv_all.csv", stringsAsFactors = FALSE)
unique(solar$install_type)
solar$install <- as.Date(solar$date_installed, format = "%m/%d/%y")
solar$install <- as.Date(solar$date_installed, format = "%m/%d/%Y")
solar$year <- as.numeric(format(solar$install, %Y))
solar$year <- as.numeric(format(solar$install, "%Y"))
View(solar)
solar$year <- as.numeric(format(solar$install, "%Y"))
solar$year <-
solar$installyear <as.numeric(format(solar$install, "%Y"))
solar$year <-
solar$installyear <- as.numeric(format(solar$install, "%Y"))
range(solar$year)
range(solar$installyear)
is.numeric(solar$installyear)
range(solar$installyear)
table(solar$installyear)
is.factor(solar$size_kw)
is.numeric(solar$size_kw)
years <- c(1999, 2001, 2003,(seq(2004,2010)))
years
years <- c(1999, 2001, 2002,(seq(2004,2010)))
?list.files
library(plyr)
years <- c(1999, 2001, 2002,(seq(2004,2010)))
temp <- tempfile()
download.file("https://www.irs.gov/pub/irs-soi/1998zipcode.zip",temp, mode="wb")
unzipped <- unzip(temp, exdir=getwd())
filenames <- list.files(path = unzipped, pattern = "xls")
getwd
getwd()
filenames <- list.files(path = "C:/Users/Sarah/Documents/GitHub/DataIncubator/1998ZIPCode", pattern = "xls")
solar <- read.csv("~/GitHub/Incubator-Proposal/openpv_all.csv", stringsAsFactors = FALSE)
solar$install_type2 <- `levels<-`(factor(solar$install_type), list(agriculture=c("Agricultural","agricultural",
"agriculture","Commercial - Agriculture"),
commercial=c("Commercial","commercial","Commercial - Other",
"Commerical","Commercial - Agriculture",
"Small Business","Commercial - Small Business"),
educational=c("Educational","educational","education"),
institutional=c("Nonprofit","government","Government","nonprofit",
"Municipal","public","Institutional","Public",
"Gov't/NP"),
residential=c("residential","Residential","Residential/SF"),
utility=c("Utility","utility"),
unknown=c("Unknown","","unknown","Customer","Nonresidential","Not Stated")))
load("~/GitHub/Incubator-Proposal/rates.csv")
solarpv <- solar[c(-(31:81))]
library(ggplot2)
library(plyr)
library(maps)
library(maptools)
library(dplyr)
solarpv$cost <- as.numeric(solarpv$cost)
solarpv$cost_per_watt <- as.numeric(solarpv$cost_per_watt)
solarpv$annual_PV_prod <- as.numeric(solarpv$annual_PV_prod)
solarpv$annual_insolation <- as.numeric(solarpv$annual_insolation)
solarpv$rebate <- as.numeric(solarpv$rebate)
solarpvsum <- solarpv %>% group_by(state) %>% summarise_at(vars(size_kw, cost, cost_per_watt, annual_PV_prod, annual_insolation, rebate), mean, na.rm=TRUE)
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
statepv <- count(solarpv12_15, state)
names(statepv) <- c("state2", "value")
statepv$state <- state.name[match(statepv$state2,state.abb)]
statepv$state <- tolower(statepv$state)
statepv$state[statepv$state2=="DC"] <- "district of columbia"
statepv <- merge.data.frame(x=statepv, y = solarpvsum, by.x = "state2", by.y = "state")
statepv$costratio <- statepv$rebate/statepv$cost
statemap <- map_data("state")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +theme_bw() +
labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
statepv$pct <- statepv$value/sum(statepv$value)*100
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +theme_bw() +
labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +
theme_bw(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank()) +
labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +
theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank()) +
labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +
theme_bw(axis.line=element_blank(), axis.ticks=element_blank()) +
labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +
theme_bw() + labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +
theme_bw() + labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +
theme_bw() + labs(x="", y="", title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
statepv$pct <- statepv$value/sum(statepv$value)*100
statepv <- count(solarpv12_15, state)
names(statepv) <- c("state2", "value")
statepv$state <- state.name[match(statepv$state2,state.abb)]
statepv$state <- tolower(statepv$state)
statepv$state[statepv$state2=="DC"] <- "district of columbia"
statepv <- merge.data.frame(x=statepv, y = solarpvsum, by.x = "state2", by.y = "state")
statepv$costratio <- statepv$rebate/statepv$cost
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
solarpv$cost <- as.numeric(solarpv$cost)
solarpv$cost_per_watt <- as.numeric(solarpv$cost_per_watt)
solarpv$annual_PV_prod <- as.numeric(solarpv$annual_PV_prod)
solarpv$annual_insolation <- as.numeric(solarpv$annual_insolation)
solarpv$rebate <- as.numeric(solarpv$rebate)
solarpvsum <- solarpv %>% group_by(state) %>% summarise_at(vars(size_kw, cost, cost_per_watt, annual_PV_prod, annual_insolation, rebate), mean, na.rm=TRUE)
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
View(solarpv12_15)
solarpv$cost <- as.numeric(solarpv$cost)
solarpv$cost_per_watt <- as.numeric(solarpv$cost_per_watt)
solarpv$annual_PV_prod <- as.numeric(solarpv$annual_PV_prod)
solarpv$annual_insolation <- as.numeric(solarpv$annual_insolation)
solarpv$rebate <- as.numeric(solarpv$rebate)
solarpvsum <- solarpv %>% group_by(state) %>% summarise_at(vars(size_kw, cost, cost_per_watt, annual_PV_prod, annual_insolation, rebate), mean, na.rm=TRUE)
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
solarpv <- solar[c(-(31:81))]
View(solarpvsum)
View(statepv)
solar <- read.csv("~/GitHub/Incubator-Proposal/openpv_all.csv", stringsAsFactors = FALSE)
solar$install_type2 <- `levels<-`(factor(solar$install_type), list(agriculture=c("Agricultural","agricultural",
"agriculture","Commercial - Agriculture"),
commercial=c("Commercial","commercial","Commercial - Other",
"Commerical","Commercial - Agriculture",
"Small Business","Commercial - Small Business"),
educational=c("Educational","educational","education"),
institutional=c("Nonprofit","government","Government","nonprofit",
"Municipal","public","Institutional","Public",
"Gov't/NP"),
residential=c("residential","Residential","Residential/SF"),
utility=c("Utility","utility"),
unknown=c("Unknown","","unknown","Customer","Nonresidential","Not Stated")))
save(solar,file = "~/GitHub/Incubator-Proposal/solar.csv")
load("~/GitHub/Incubator-Proposal/rates.csv")
solarpv <- solar[c(-(31:81))]
solarpv$cost <- as.numeric(solarpv$cost)
solarpv$cost_per_watt <- as.numeric(solarpv$cost_per_watt)
solarpv$annual_PV_prod <- as.numeric(solarpv$annual_PV_prod)
solarpv$annual_insolation <- as.numeric(solarpv$annual_insolation)
solarpv$rebate <- as.numeric(solarpv$rebate)
solarpvsum <- solarpv %>% group_by(state) %>% summarise_at(vars(size_kw, cost, cost_per_watt, annual_PV_prod, annual_insolation, rebate), mean, na.rm=TRUE)
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
statepv <- count(solarpv12_15, state)
names(statepv) <- c("state2", "value")
statepv$state <- state.name[match(statepv$state2,state.abb)]
statepv$state <- tolower(statepv$state)
statepv$state[statepv$state2=="DC"] <- "district of columbia"
statepv <- merge.data.frame(x=statepv, y = solarpvsum, by.x = "state2", by.y = "state")
statepv$costratio <- statepv$rebate/statepv$cost
statemap <- map_data("state")
statepv$pct <- statepv$value/sum(statepv$value)*100
statepv <- count(solarpv12_15, state)
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
rm(statepv)
rm(solarpv12_15)
solarpv$cost <- as.numeric(solarpv$cost)
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
solar$install <- as.Date(solar$date_installed, format = "%m/%d/%Y")
solar$installyear <- as.numeric(format(solar$install, "%Y"))
solarpv <- solar[c(-(31:81))]
solarpv12_15 <- solarpv[which(solarpv$installyear>=2012 & solarpv$installyear<=2015),]
statepv <- count(solarpv12_15, state)
names(statepv) <- c("state2", "value")
statepv$state <- state.name[match(statepv$state2,state.abb)]
statepv$state <- tolower(statepv$state)
statepv$state[statepv$state2=="DC"] <- "district of columbia"
statepv <- merge.data.frame(x=statepv, y = solarpvsum, by.x = "state2", by.y = "state")
statepv$costratio <- statepv$rebate/statepv$cost
statemap <- map_data("state")
statepv$pct <- (statepv$value/sum(statepv$value))*100
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +theme_bw() +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()) +
labs(title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = costratio), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +theme_bw() +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()) +
labs(title="Ratio of average rebate to average cost", fill="Rebate/cost") +
scale_fill_gradient(low="gray90", high="blue4")
ggplot(statepv, aes(map_id=state)) + geom_map(aes(fill = pct), map = statemap) +
expand_limits(x = statemap$long, y = statemap$lat) +theme_bw() +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()) +
labs(title="Percent of solar installations by state", fill="Percent") +
scale_fill_gradient(low="gray90", high="green4")
